# 동적계획법(Dynamic Programming)
# 등굣길
# 시간복잡도: O(mn)
"""
1. 집에서 학교까지 가는 길은 m x n 크기의 격자모양

2. 가장 왼쪽 위(집)이 있는 곳의 좌표는 (1, 1) / 가장 오른쪽 아래(학교)가 있는 곳의 좌표는 (m, n)

3. 오른쪽과 아래쪽으로만 움직여 집에서 학교까지 갈 수 있는 최단경로의 개수를 1,000,000,007로 나눈 나머지를 return

4. 격자의 크기 m, n은 1 이상 100 이하인 자연수(m과 n이 모두 1인 경우는 입력으로 주어지지 않습니다.)

5. 물에 잠긴 지역은 0개 이상 10개 이하

6. 집과 학교가 물에 잠긴 경우는 입력으로 주어지지 않습니다.
"""
def solution(m, n, puddles):
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    dp[1][1] = 1
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if i == 1 and j == 1:
                continue
            if [j, i] in puddles:
                dp[i][j] = 0
            else:
                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % 1000000007
    return dp[n][m]

"""
- dp[i][j]에는 최단 경로 수를 넣음
- (1, 1)은 이미 반복문 전에 할당했으므로 통과
- [i, j]가 물에 잠긴 위치일 경우 경로는 0으로
- m은 가로, n은 세로 => dp[n][m]이 답
"""